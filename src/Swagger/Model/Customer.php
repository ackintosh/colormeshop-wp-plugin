<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  ColorMeShop\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * カラーミーショップ API
 *
 * # カラーミーショップ API  [カラーミーショップ](https://shop-pro.jp) APIでは、受注の検索や商品情報の更新を行うことができます。  ## 利用手順  はじめに、カラーミーデベロッパーアカウントを用意します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリケーション登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  その後、カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面で確認できるクライアントID| |`response_type`|\"code\"という文字列| |`scope`| 別表参照| |`redirect_url`|アプリケーション登録時に入力したリダイレクトURL|  `scope`は、以下のうち、アプリケーションが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URL&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのIDとパスワードの入力を求められます。 承認ボタンを押すと、このアプリケーションがショップのデータにアクセスすることが許可され、リダイレクトURLへリダイレクトされます。  承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリケーション登録時のリダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされます。 末尾のパスが認可コードになっています。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  最後に、認可コードとアクセストークンを交換します。以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面に表示されているクライアントID| |`client_secret`|アプリケーション詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|\"authorization_code\"という文字列| |`redirect_uri`|アプリケーション登録時に入力したリダイレクトURL|  ```console # curl での例  $ curl -X POST \\   -d'client_id=CLIENT_ID' \\   -d'client_secret=CLIENT_SECRET' \\   -d'code=CODE' \\   -d'grant_type=authorization_code'   \\   -d'redirect_uri=REDIRECT_URI'  \\   'https://api.shop-pro.jp/oauth/token' ```  リクエストが成功すると、以下のようなJSONが返ってきます。  ```json {   \"access_token\": \"d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\",   \"token_type\": \"bearer\",   \"scope\": \"read_products write_products\" } ```  アクセストークンに有効期限はありませんが、許可済みアプリケーション一覧画面から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する際の例を示します。  ```console # curlの例  $ curl -H 'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPI v1では  - エラーコード - エラーメッセージ - ステータスコード  の配列でエラーを表現します。以下に例を示します。  ```json {   \"errors\": [     {       \"code\": 404100,       \"message\": \"レコードが見つかりませんでした。\",       \"status\": 404     }   ] } ```
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ColorMeShop\Swagger\Model;

use \ArrayAccess;

/**
 * Customer Class Doc Comment
 *
 * @category    Class
 * @package     ColorMeShop\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Customer implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'account_id' => 'string',
        'name' => 'string',
        'furigana' => 'string',
        'hojin' => 'string',
        'busho' => 'string',
        'sex' => 'string',
        'postal' => 'string',
        'pref_id' => 'int',
        'pref_name' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'mail' => 'string',
        'tel' => 'string',
        'fax' => 'string',
        'tel_mobile' => 'string',
        'memo' => 'string',
        'points' => 'int',
        'member' => 'bool',
        'sales_count' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account_id' => 'account_id',
        'name' => 'name',
        'furigana' => 'furigana',
        'hojin' => 'hojin',
        'busho' => 'busho',
        'sex' => 'sex',
        'postal' => 'postal',
        'pref_id' => 'pref_id',
        'pref_name' => 'pref_name',
        'address1' => 'address1',
        'address2' => 'address2',
        'mail' => 'mail',
        'tel' => 'tel',
        'fax' => 'fax',
        'tel_mobile' => 'tel_mobile',
        'memo' => 'memo',
        'points' => 'points',
        'member' => 'member',
        'sales_count' => 'sales_count'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'name' => 'setName',
        'furigana' => 'setFurigana',
        'hojin' => 'setHojin',
        'busho' => 'setBusho',
        'sex' => 'setSex',
        'postal' => 'setPostal',
        'pref_id' => 'setPrefId',
        'pref_name' => 'setPrefName',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'mail' => 'setMail',
        'tel' => 'setTel',
        'fax' => 'setFax',
        'tel_mobile' => 'setTelMobile',
        'memo' => 'setMemo',
        'points' => 'setPoints',
        'member' => 'setMember',
        'sales_count' => 'setSalesCount'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'name' => 'getName',
        'furigana' => 'getFurigana',
        'hojin' => 'getHojin',
        'busho' => 'getBusho',
        'sex' => 'getSex',
        'postal' => 'getPostal',
        'pref_id' => 'getPrefId',
        'pref_name' => 'getPrefName',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'mail' => 'getMail',
        'tel' => 'getTel',
        'fax' => 'getFax',
        'tel_mobile' => 'getTelMobile',
        'memo' => 'getMemo',
        'points' => 'getPoints',
        'member' => 'getMember',
        'sales_count' => 'getSalesCount'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SEX_MALE = 'male';
    const SEX_FEMALE = 'female';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSexAllowableValues()
    {
        return [
            self::SEX_MALE,
            self::SEX_FEMALE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['furigana'] = isset($data['furigana']) ? $data['furigana'] : null;
        $this->container['hojin'] = isset($data['hojin']) ? $data['hojin'] : null;
        $this->container['busho'] = isset($data['busho']) ? $data['busho'] : null;
        $this->container['sex'] = isset($data['sex']) ? $data['sex'] : null;
        $this->container['postal'] = isset($data['postal']) ? $data['postal'] : null;
        $this->container['pref_id'] = isset($data['pref_id']) ? $data['pref_id'] : null;
        $this->container['pref_name'] = isset($data['pref_name']) ? $data['pref_name'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['mail'] = isset($data['mail']) ? $data['mail'] : null;
        $this->container['tel'] = isset($data['tel']) ? $data['tel'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['tel_mobile'] = isset($data['tel_mobile']) ? $data['tel_mobile'] : null;
        $this->container['memo'] = isset($data['memo']) ? $data['memo'] : null;
        $this->container['points'] = isset($data['points']) ? $data['points'] : null;
        $this->container['member'] = isset($data['member']) ? $data['member'] : null;
        $this->container['sales_count'] = isset($data['sales_count']) ? $data['sales_count'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getSexAllowableValues();
        if (!in_array($this->container['sex'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'sex', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getSexAllowableValues();
        if (!in_array($this->container['sex'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id 顧客ID
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param string $account_id ショップアカウントID
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name 顧客の名前
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets furigana
     * @return string
     */
    public function getFurigana()
    {
        return $this->container['furigana'];
    }

    /**
     * Sets furigana
     * @param string $furigana 名前のフリガナ
     * @return $this
     */
    public function setFurigana($furigana)
    {
        $this->container['furigana'] = $furigana;

        return $this;
    }

    /**
     * Gets hojin
     * @return string
     */
    public function getHojin()
    {
        return $this->container['hojin'];
    }

    /**
     * Sets hojin
     * @param string $hojin 法人名
     * @return $this
     */
    public function setHojin($hojin)
    {
        $this->container['hojin'] = $hojin;

        return $this;
    }

    /**
     * Gets busho
     * @return string
     */
    public function getBusho()
    {
        return $this->container['busho'];
    }

    /**
     * Sets busho
     * @param string $busho 部署名
     * @return $this
     */
    public function setBusho($busho)
    {
        $this->container['busho'] = $busho;

        return $this;
    }

    /**
     * Gets sex
     * @return string
     */
    public function getSex()
    {
        return $this->container['sex'];
    }

    /**
     * Sets sex
     * @param string $sex 性別
     * @return $this
     */
    public function setSex($sex)
    {
        $allowed_values = $this->getSexAllowableValues();
        if (!is_null($sex) && !in_array($sex, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sex', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['sex'] = $sex;

        return $this;
    }

    /**
     * Gets postal
     * @return string
     */
    public function getPostal()
    {
        return $this->container['postal'];
    }

    /**
     * Sets postal
     * @param string $postal 郵便番号
     * @return $this
     */
    public function setPostal($postal)
    {
        $this->container['postal'] = $postal;

        return $this;
    }

    /**
     * Gets pref_id
     * @return int
     */
    public function getPrefId()
    {
        return $this->container['pref_id'];
    }

    /**
     * Sets pref_id
     * @param int $pref_id 都道府県の通し番号。北海道が1、沖縄が47
     * @return $this
     */
    public function setPrefId($pref_id)
    {
        $this->container['pref_id'] = $pref_id;

        return $this;
    }

    /**
     * Gets pref_name
     * @return string
     */
    public function getPrefName()
    {
        return $this->container['pref_name'];
    }

    /**
     * Sets pref_name
     * @param string $pref_name 都道府県名
     * @return $this
     */
    public function setPrefName($pref_name)
    {
        $this->container['pref_name'] = $pref_name;

        return $this;
    }

    /**
     * Gets address1
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     * @param string $address1 住所1
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     * @param string $address2 住所2
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets mail
     * @return string
     */
    public function getMail()
    {
        return $this->container['mail'];
    }

    /**
     * Sets mail
     * @param string $mail メールアドレス
     * @return $this
     */
    public function setMail($mail)
    {
        $this->container['mail'] = $mail;

        return $this;
    }

    /**
     * Gets tel
     * @return string
     */
    public function getTel()
    {
        return $this->container['tel'];
    }

    /**
     * Sets tel
     * @param string $tel 電話番号
     * @return $this
     */
    public function setTel($tel)
    {
        $this->container['tel'] = $tel;

        return $this;
    }

    /**
     * Gets fax
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     * @param string $fax FAX番号
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets tel_mobile
     * @return string
     */
    public function getTelMobile()
    {
        return $this->container['tel_mobile'];
    }

    /**
     * Sets tel_mobile
     * @param string $tel_mobile 携帯電話番号
     * @return $this
     */
    public function setTelMobile($tel_mobile)
    {
        $this->container['tel_mobile'] = $tel_mobile;

        return $this;
    }

    /**
     * Gets memo
     * @return string
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     * @param string $memo 備考
     * @return $this
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets points
     * @return int
     */
    public function getPoints()
    {
        return $this->container['points'];
    }

    /**
     * Sets points
     * @param int $points 保有ポイント数
     * @return $this
     */
    public function setPoints($points)
    {
        $this->container['points'] = $points;

        return $this;
    }

    /**
     * Gets member
     * @return bool
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     * @param bool $member 会員登録済みであるか否か
     * @return $this
     */
    public function setMember($member)
    {
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets sales_count
     * @return int
     */
    public function getSalesCount()
    {
        return $this->container['sales_count'];
    }

    /**
     * Sets sales_count
     * @param int $sales_count これまでの購入回数
     * @return $this
     */
    public function setSalesCount($sales_count)
    {
        $this->container['sales_count'] = $sales_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ColorMeShop\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ColorMeShop\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }
}


